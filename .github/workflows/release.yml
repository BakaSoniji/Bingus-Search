name: Release - Build & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Release configuration
  ENABLE_RELEASES: ${{ vars.ENABLE_RELEASES || 'true' }}
  ENABLE_HELM_PUBLISHING: ${{ vars.ENABLE_HELM_PUBLISHING || 'true' }}
  CUSTOM_REGISTRY: ${{ vars.CUSTOM_REGISTRY || '' }}  # Optional custom registry override

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine CalVer version
        id: version
        run: |
          # CalVer: vYYYY.MM.P (increment P within month)
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          PREFIX="v${YEAR}.${MONTH}."

          # Find latest tag with this year.month prefix
          LAST=$(git tag --list "${PREFIX}*" | sort -V | tail -n1)
          if [[ -z "$LAST" ]]; then
            PATCH=0
          else
            PATCH=${LAST##${PREFIX}}
            PATCH=$((PATCH+1))
          fi

          VERSION="${PREFIX}${PATCH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION"

  build-release-images:
    runs-on: ubuntu-latest
    needs: validate-release

    strategy:
      matrix:
        service: [encoder, api, bot]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'encoder' && 'bingus-python-encoder/Dockerfile' || (matrix.service == 'api' && 'api.Dockerfile' || 'bot.Dockerfile') }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Cosign removed for simplicity (low traffic project)

  security-scan-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-images]

    strategy:
      matrix:
        service: [encoder, api, bot]

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ needs.validate-release.outputs.version }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  package-helm-chart:
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Update Helm chart version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix for Helm chart version
          CHART_VERSION="${VERSION#v}"

          # Update Chart.yaml
          sed -i "s/^version: .*/version: $CHART_VERSION/" helm/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"$VERSION\"/" helm/Chart.yaml

          # Update values.yaml with new image tags
          sed -i "s/tag: latest/tag: $VERSION/g" helm/values.yaml

          echo "üì¶ Updated Helm chart to version $CHART_VERSION"

      - name: Package Helm chart
        run: |
          helm package helm/ --destination ./charts/

          # Create index
          helm repo index ./charts/ --url https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.version }}/

      - name: Upload Helm chart artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: ./charts/
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-images, security-scan-release, package-helm-chart]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm-charts
          path: ./charts/

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "## üöÄ What's Changed" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%an)" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## üöÄ Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "- Initial release of Bingus search application" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "## üì¶ Container Images" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- \`ghcr.io/${{ github.repository }}/encoder:${{ needs.validate-release.outputs.version }}\`" >> CHANGELOG.md
          echo "- \`ghcr.io/${{ github.repository }}/api:${{ needs.validate-release.outputs.version }}\`" >> CHANGELOG.md
          echo "- \`ghcr.io/${{ github.repository }}/bot:${{ needs.validate-release.outputs.version }}\`" >> CHANGELOG.md

          echo "" >> CHANGELOG.md
          echo "## üéØ Helm Chart" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Install with:" >> CHANGELOG.md
          echo "\`\`\`bash" >> CHANGELOG.md
          echo "helm install bingus oci://ghcr.io/${{ github.repository }}/helm/bingus --version ${{ needs.validate-release.outputs.version }}" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            charts/*.tgz
            charts/index.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Helm charts
        uses: actions/download-artifact@v3
        with:
          name: helm-charts
          path: ./charts/

      - name: Push Helm chart to OCI registry
        run: |
          CHART_FILE=$(ls charts/*.tgz)
          helm push "$CHART_FILE" oci://${{ env.REGISTRY }}/${{ github.repository }}/helm

  deploy-frontend-cloudflare:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: vars.ENABLE_FRONTEND_DEPLOYMENT == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd bingus-frontend
          npm ci

      - name: Build frontend
        run: |
          cd bingus-frontend
          npm run build
        env:
          # Optional override; if unset, frontend uses code default
          VITE_API_BASE_URL: ${{ vars.FRONTEND_API_BASE_URL }}

      - name: Validate Cloudflare configuration
        run: |
          if [[ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN secret is required"
            exit 1
          fi
          if [[ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID secret is required"
            exit 1
          fi
          if [[ -z "${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}" ]]; then
            echo "‚ùå CLOUDFLARE_R2_BUCKET_NAME variable is required"
            exit 1
          fi
          echo "‚úÖ Cloudflare configuration validated"

      - name: Deploy to Cloudflare R2
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: r2 object put ${{ vars.CLOUDFLARE_R2_BUCKET_NAME }} --file="./bingus-frontend/dist" --recursive

      - name: Purge Cloudflare cache
        if: vars.CLOUDFLARE_ZONE_ID
        run: |
          echo "üßπ Purging Cloudflare cache for zone: ${{ vars.CLOUDFLARE_ZONE_ID }}"
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' \
            --fail

  notify-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-helm-chart, deploy-frontend-cloudflare]
    if: always()

    steps:
      - name: Notify release completion
        run: |
          if [[ "${{ needs.create-release.result }}" == "success" && "${{ needs.publish-helm-chart.result }}" == "success" ]]; then
            echo "üéâ Release ${{ needs.validate-release.outputs.version }} completed successfully!"
            echo "üì¶ Container images published to ghcr.io"
            echo "‚éà Helm chart published to OCI registry"
            if [[ "${{ needs.deploy-frontend-cloudflare.result }}" == "success" ]]; then
              echo "üåê Frontend deployed to Cloudflare R2"
            fi
            echo "üìã GitHub release created with changelog"
          else
            echo "‚ùå Release pipeline failed"
            exit 1
          fi
