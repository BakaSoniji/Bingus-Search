name: Cloudflare Deploy

on:
  push:
    branches: [main]
    paths:
      - 'bingus-frontend/**'
      - 'package*.json'
      - '.github/workflows/cloudflare-deploy.yml'
  workflow_dispatch:

env:
  # Set to false to disable deployment (useful for forks)
  ENABLE_DEPLOYMENT: ${{ vars.ENABLE_FRONTEND_DEPLOYMENT || 'false' }}

jobs:
  detect-deployment-target:
    runs-on: ubuntu-latest
    outputs:
      deploy-cloudflare-r2: ${{ steps.detect.outputs.deploy-cloudflare-r2 }}
      should-deploy: ${{ steps.detect.outputs.should-deploy }}
    steps:
      - name: Detect deployment configuration
        id: detect
        run: |
          # Cloudflare R2 deployment (custom deployment)
          if [[ "${{ env.ENABLE_DEPLOYMENT }}" == "true" && -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]]; then
            echo "deploy-cloudflare-r2=true" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-cloudflare-r2=false" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Deployment skipped. To enable:"
            echo "1. Set repository variable ENABLE_FRONTEND_DEPLOYMENT=true"
            echo "2. Add secret CLOUDFLARE_API_TOKEN"
            echo "3. Add secret CLOUDFLARE_ACCOUNT_ID"
            echo "4. Add variable CLOUDFLARE_R2_BUCKET_NAME"
          fi

  build:
    runs-on: ubuntu-latest
    needs: detect-deployment-target
    if: needs.detect-deployment-target.outputs.should-deploy == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd bingus-frontend
          npm ci

      - name: Build frontend
        run: |
          cd bingus-frontend
          npm run build
        env:
          # Build settings from environment variables - no defaults to force explicit configuration
          VITE_API_BASE_URL: ${{ vars.FRONTEND_API_BASE_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: bingus-frontend/dist/
          retention-days: 7

  deploy-cloudflare-r2:
    runs-on: ubuntu-latest
    needs: [detect-deployment-target, build]
    if: needs.detect-deployment-target.outputs.deploy-cloudflare-r2 == 'true'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: ./dist

      - name: Validate Cloudflare configuration
        run: |
          if [[ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN secret is required"
            exit 1
          fi
          if [[ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID secret is required"
            exit 1
          fi
          if [[ -z "${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}" ]]; then
            echo "‚ùå CLOUDFLARE_R2_BUCKET_NAME variable is required"
            exit 1
          fi
          if [[ -z "${{ vars.FRONTEND_API_BASE_URL }}" ]]; then
            echo "‚ùå FRONTEND_API_BASE_URL variable is required"
            exit 1
          fi
          echo "‚úÖ Cloudflare configuration validated"

      - name: Deploy to Cloudflare R2
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: r2 object put ${{ vars.CLOUDFLARE_R2_BUCKET_NAME }} --file="./dist" --recursive

      - name: Purge Cloudflare cache
        if: vars.CLOUDFLARE_ZONE_ID
        run: |
          echo "üßπ Purging Cloudflare cache for zone: ${{ vars.CLOUDFLARE_ZONE_ID }}"
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' \
            --fail

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [detect-deployment-target, deploy-cloudflare-r2]
    if: always() && needs.detect-deployment-target.outputs.should-deploy == 'true'

    steps:
      - name: Deployment summary
        run: |
          echo "üöÄ Frontend Deployment Summary"
          echo "================================"

          if [[ "${{ needs.deploy-cloudflare-r2.result }}" == "success" ]]; then
            echo "‚úÖ Cloudflare R2: Deployed successfully"
            if [[ -n "${{ vars.FRONTEND_CUSTOM_DOMAIN }}" ]]; then
              echo "üåê URL: https://${{ vars.FRONTEND_CUSTOM_DOMAIN }}"
            else
              echo "üåê R2 bucket: ${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}"
            fi
          elif [[ "${{ needs.detect-deployment-target.outputs.deploy-cloudflare-r2 }}" == "true" ]]; then
            echo "‚ùå Cloudflare R2: Deployment failed"
          fi
