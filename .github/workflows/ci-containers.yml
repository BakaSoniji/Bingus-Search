name: Container CI - Multi-Service Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Set to false to disable container builds (useful for forks without container registry access)
  ENABLE_CONTAINER_BUILDS: ${{ vars.ENABLE_CONTAINER_BUILDS || 'true' }}
  # Only push images on main branch and releases (saves registry space)
  SHOULD_PUSH: ${{ github.ref == 'refs/heads/main' || github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') }}

jobs:
  check-skip:
    runs-on: ubuntu-latest
    steps:
      - name: Docs-only changes detected
        if: github.event_name == 'push'
        run: |
          echo "‚ÑπÔ∏è Checking for code changes..."
          echo "If only documentation was changed, container builds will be skipped."

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      encoder: ${{ steps.changes.outputs.encoder }}
      api: ${{ steps.changes.outputs.api }}
      bot: ${{ steps.changes.outputs.bot }}
      helm: ${{ steps.changes.outputs.helm }}
      docs: ${{ steps.changes.outputs.docs }}
      has-code-changes: ${{ steps.check.outputs.has-code-changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            encoder:
              - 'bingus-python-encoder/**'
              - 'docker-compose.yml'
              - '.github/workflows/ci-containers.yml'
            api:
              - 'BingusApi/**'
              - 'BingusLib/**'
              - 'api.Dockerfile'
              - 'BingusBackend.sln'
              - 'docker-compose.yml'
              - '.github/workflows/ci-containers.yml'
            bot:
              - 'bingus-bot/**'
              - 'bot.Dockerfile'
              - 'package*.json'
              - 'docker-compose.yml'
              - '.github/workflows/ci-containers.yml'
            helm:
              - 'helm/**'
              - '.github/workflows/ci-containers.yml'
            docs:
              - '**/*.md'
              - '**/README*'
              - 'docs/**'
              - '.github/ENVIRONMENT_SETUP.md'

      - name: Check for code changes
        id: check
        run: |
          if [[ "${{ steps.changes.outputs.encoder }}" == "true" || "${{ steps.changes.outputs.api }}" == "true" || "${{ steps.changes.outputs.bot }}" == "true" || "${{ steps.changes.outputs.helm }}" == "true" ]]; then
            echo "has-code-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-code-changes=false" >> $GITHUB_OUTPUT
          fi

  lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-code-changes == 'true'
    steps:
      - uses: actions/checkout@v4

      # Python linting for encoder
      - name: Set up Python
        if: needs.detect-changes.outputs.encoder == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.14'

      - name: Lint Python code (encoder)
        if: needs.detect-changes.outputs.encoder == 'true'
        run: |
          pip install flake8 black isort
          cd bingus-python-encoder
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          black --check --diff . || true
          isort --check-only --diff . || true

      # .NET linting for API
      - name: Set up .NET
        if: needs.detect-changes.outputs.api == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Lint .NET code (API)
        if: needs.detect-changes.outputs.api == 'true'
        run: |
          dotnet format --verify-no-changes --verbosity diagnostic || true

      # Node.js linting for bot
      - name: Set up Node.js
        if: needs.detect-changes.outputs.bot == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Lint Node.js code (bot)
        if: needs.detect-changes.outputs.bot == 'true'
        run: |
          npm ci
          npm run -w bingus-bot lint || true

  test-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.encoder == 'true' || needs.detect-changes.outputs.api == 'true' || needs.detect-changes.outputs.bot == 'true'

    strategy:
      matrix:
        service: [encoder, api, bot]

    steps:
      - uses: actions/checkout@v4

      - name: Check if service changed
        id: check
        run: |
          if [[ "${{ matrix.service }}" == "encoder" && "${{ needs.detect-changes.outputs.encoder }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "api" && "${{ needs.detect-changes.outputs.api }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "bot" && "${{ needs.detect-changes.outputs.bot }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check.outputs.changed == 'true' && matrix.service == 'encoder'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up .NET
        if: steps.check.outputs.changed == 'true' && matrix.service == 'api'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Set up Node.js
        if: steps.check.outputs.changed == 'true' && matrix.service == 'bot'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Set up test environment
        if: steps.check.outputs.changed == 'true'
        run: |
          case "${{ matrix.service }}" in
            "encoder")
              if [ -f "bingus-python-encoder/requirements/runtime.txt" ]; then
                pip install -r bingus-python-encoder/requirements/runtime.txt
              fi
              ;;
            "api")
              # .NET restore
              dotnet restore BingusApi
              ;;
            "bot")
              # Node.js install
              npm ci
              ;;
          esac

      - name: Run tests
        if: steps.check.outputs.changed == 'true'
        run: |
          case "${{ matrix.service }}" in
            "encoder")
              cd bingus-python-encoder
              if [ -f "test_*.py" ] || [ -d "tests" ]; then
                python -m pytest -v
              else
                echo "No tests found for encoder"
              fi
              ;;
            "api")
              # .NET test
              dotnet test --no-restore --verbosity normal
              ;;
            "bot")
              # Node.js test
              npm run -w bingus-bot test || echo "No tests configured for bot"
              ;;
          esac

  build-images:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint, test-services]
    if: always() && (needs.lint.result == 'success') && (needs.test-services.result == 'success' || needs.test-services.result == 'skipped') && vars.ENABLE_CONTAINER_BUILDS == 'true'

    strategy:
      matrix:
        service: [encoder, api, bot]

    steps:
      - uses: actions/checkout@v4

      - name: Check if service changed
        id: check
        run: |
          if [[ "${{ matrix.service }}" == "encoder" && "${{ needs.detect-changes.outputs.encoder }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "api" && "${{ needs.detect-changes.outputs.api }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "bot" && "${{ needs.detect-changes.outputs.bot }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build strategy info
        if: steps.check.outputs.changed == 'true'
        run: |
          echo "üî® Building ${{ matrix.service }} container..."
          if [[ "${{ env.SHOULD_PUSH }}" == "true" ]]; then
            echo "üì¶ Will push to registry (main branch or release)"
          else
            echo "üèóÔ∏è Build-only mode (feature branch - no registry push)"
          fi

      - name: Set up Docker Buildx
        if: steps.check.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.check.outputs.changed == 'true' && env.SHOULD_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Allow forks without registry access to still run other checks

      - name: Extract metadata
        if: steps.check.outputs.changed == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.check.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'encoder' && 'bingus-python-encoder/Dockerfile' || (matrix.service == 'api' && 'api.Dockerfile' || 'bot.Dockerfile') }}
          platforms: linux/amd64,linux/arm64
          push: ${{ env.SHOULD_PUSH == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-images]
    if: needs.build-images.result == 'success'

    strategy:
      matrix:
        service: [encoder, api, bot]

    steps:
      - uses: actions/checkout@v4

      - name: Check if service changed
        id: check
        run: |
          if [[ "${{ matrix.service }}" == "encoder" && "${{ needs.detect-changes.outputs.encoder }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "api" && "${{ needs.detect-changes.outputs.api }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.service }}" == "bot" && "${{ needs.detect-changes.outputs.bot }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner
        if: steps.check.outputs.changed == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        if: steps.check.outputs.changed == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  helm-lint:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.helm == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Lint Helm chart
        run: |
          helm lint helm/

      - name: Template Helm chart
        run: |
          helm template bingus helm/ > /tmp/rendered-manifests.yaml
          echo "‚úÖ Helm chart templates render successfully"

      - name: Validate Kubernetes manifests
        uses: instrumenta/kubeval-action@master
        with:
          files: /tmp/rendered-manifests.yaml

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-images, helm-lint]
    if: always() && (needs.build-images.result == 'success' || needs.build-images.result == 'skipped') && (needs.helm-lint.result == 'success' || needs.helm-lint.result == 'skipped')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Test with docker-compose if available
          if [ -f "docker-compose.yml" ]; then
            echo "Running integration tests with Docker Compose"
            docker compose -f docker-compose.yml up -d --build
            sleep 30  # Wait for services to start

            # Basic health checks
            echo "Testing encoder service..."
            curl -f http://localhost:5000/health || echo "Encoder health check failed"

            echo "Testing API service..."
            curl -f http://localhost:8000/health || echo "API health check failed"

            docker compose down
          else
            echo "No docker-compose.yml found, skipping integration tests"
          fi

  notify-success:
    runs-on: ubuntu-latest
    needs: [lint, test-services, build-images, security-scan, helm-lint, integration-test]
    if: always() && (needs.lint.result == 'success') && (needs.build-images.result == 'success' || needs.build-images.result == 'skipped')

    steps:
      - name: Notify success
        run: |
          echo "üéâ CI Pipeline completed successfully!"
          echo "‚úÖ Linting passed"
          echo "‚úÖ Tests passed"
          echo "‚úÖ Images built and scanned"
          echo "‚úÖ Helm chart validated"
